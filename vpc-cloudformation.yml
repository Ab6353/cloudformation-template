AWSTemplateFormatVersion: "2010-09-09"
Description: This is a CloudFormation Template for VPC creation.

Parameters:

  VpcCIDR:
    Description: Please Enter the IP Range (CIDR value)
    Type: String
    Default: 10.0.0.0/16

  PublicSubnet1CIDR:
    Description: Please Enter IP Range for Public Subnet 1
    Type: String
    Default: 10.0.1.0/24
   
  PublicSubnet2CIDR:
    Description: Please Enter IP Range for Public Subnet 1
    Type: String
    Default: 10.0.2.0/24

  PrivateSubnet1CIDR:
    Description: Please Enter IP Range for Public Subnet 1
    Type: String
    Default: 10.0.10.0/24

  PrivateSubnet2CIDR:
    Description: Please Enter IP Range for Public Subnet 1
    Type: String
    Default: 10.0.11.0/24


Resources:
  VPC:                   #creation of vpc
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-myvpc #* //with stack name

  InternetGateway:          #creation of IGW
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IGW

  InternetGatewayAttachment:   #attachment of IGW to VPC
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway 
      VpcId: !Ref VPC

  PublicSubnet1:              #public subnet for az ap-south-1a
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ] # * auto fetch
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true  
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

  PrivateSubnet1:               #private subnet for az ap-south-1a
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref  PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-privateSubnet1
   
  PublicSubnet2:              #public subnet for az ap-south-1b
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true  
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnet2:               #private subnet for az ap-south-1a
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-privatesubnet2

  EIPforNAT:                     #Elastic ip for nat device gateway
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment   #If you define an Elastic IP address and associate it with a VPC that is defined in the same template, you must declare a dependency on the VPC-gateway attachment
    Properties: 
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt EIPforNAT.AllocationId
      SubnetId: !Ref PublicSubnet1

  PublicRouteTable:     #public route table to be associated
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key : Name
          Value: !Sub ${AWS::StackName}-Public-route-table

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:      #private route table to be associated
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private-Route-Table

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PublicSubnet1Association:  #public subnet 1  with public routetable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2Association:   #public subnet 2 with public routetable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateSubnet1Association:       #private subnet 1 with public routetable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet1
   
  PrivateSubnet2Association:     #private subnet 2 with public routetable
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet2
       
Outputs:
  VPC:
    Description: A reference to the created VPC
    Value: !Ref VPC  
   
   
   
